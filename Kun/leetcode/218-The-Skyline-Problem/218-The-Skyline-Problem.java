import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;

class Solution {
    public List<List<Integer>> getSkyline(int[][] buildings) {
        // I try to use the DAC approach to get this done
        return dac(buildings, 0, buildings.length-1);
    }

    private List<List<Integer>> dac(int[][] buildings, int s, int e){
        if (s == e) {
            List<List<Integer>> res = new ArrayList<List<Integer>>();
            res.add(Arrays.asList(buildings[s][0],buildings[s][2]));
            res.add(Arrays.asList(buildings[s][1],0));
            return res;
        }
        int mid = (s+e)/2;
        List<List<Integer>> resL = dac(buildings, s, mid);
        List<List<Integer>> resR = dac(buildings, mid+1, e);
        return merge(resL, resR);
    }

    private List<List<Integer>> merge(List<List<Integer>> sL, List<List<Integer>> sR){
        Iterator<List<Integer>> lIt = sL.iterator();
        Iterator<List<Integer>> rIt = sR.iterator();
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> pL = lIt.next();
        List<Integer> pR = rIt.next();
        Integer x = 0;
        Integer y = 0;
        Integer leftY = 0;
        Integer rightY = 0;
        int maxY = 0;
        while(pL != null || pR != null){
            List<Integer> cur = new ArrayList<>();
            if(pR == null || (pL != null && pL.get(0) <  pR.get(0))) {
                x = pL.get(0);
                leftY = pL.get(1);
                if(lIt.hasNext()){
                    pL = lIt.next();
                } else pL = null;
            } else  {
                x = pR.get(0);
                rightY = pR.get(1);
                if(rIt.hasNext()){
                    pR = rIt.next();
                } else pR = null;
            }
            maxY = Math.max(leftY, rightY);
            if (maxY != y){
                //System.out.println("x: " + x + " y: " + y + " maxY: " + maxY);
                if (!res.isEmpty())System.out.println("xCur: "+ res.get(res.size()-1).get(0) + " x: " + x);
                y = maxY;
                if (res.isEmpty() || res.get(res.size()-1).get(0) != x) {
                    //if (!res.isEmpty())System.out.println("change xCur: "+ res.get(res.size()-1).get(0));
                    cur.add(x);
                    cur.add(y);
                    res.add(cur);
                } else {
                    System.out.println("set xCur: "+ res.get(res.size()-1).get(0));
                    res.get(res.size()-1).set(1, y);
                }
            }
        }
        return res;
    }
    
    public List<List<Integer>> getSkyline_anwser(int[][] buildings) {
        int n = buildings.length;
        List<List<Integer>> output = new ArrayList<List<Integer>>();
    
        // The base cases
        if (n == 0) return output;
        if (n == 1) {
          int xStart = buildings[0][0];
          int xEnd = buildings[0][1];
          int y = buildings[0][2];
    
          output.add(new ArrayList<Integer>() {{add(xStart); add(y); }});
          output.add(new ArrayList<Integer>() {{add(xEnd); add(0); }});
          // output.add(new int[]{xStart, y});
          // output.add(new int[]{xEnd, 0});
          return output;
        }
    
        // If there is more than one building,
        // recursively divide the input into two subproblems.
        List<List<Integer>> leftSkyline, rightSkyline;
        leftSkyline = getSkyline_anwser(Arrays.copyOfRange(buildings, 0, n / 2));
        rightSkyline = getSkyline_anwser(Arrays.copyOfRange(buildings, n / 2, n));
    
        // Merge the results of subproblem together.
        return mergeSkylines(leftSkyline, rightSkyline);
      }
    
      /**
       *  Merge two skylines together.
       */
      public List<List<Integer>> mergeSkylines(List<List<Integer>> left, List<List<Integer>> right) {
        int nL = left.size(), nR = right.size();
        int pL = 0, pR = 0;
        int currY = 0, leftY = 0, rightY = 0;
        int x, maxY;
        List<List<Integer>> output = new ArrayList<List<Integer>>();
    
        // while we're in the region where both skylines are present
        while ((pL < nL) && (pR < nR)) {
          List<Integer> pointL = left.get(pL);
          List<Integer> pointR = right.get(pR);
          // pick up the smallest x
          if (pointL.get(0) < pointR.get(0)) {
            x = pointL.get(0);
            leftY = pointL.get(1);
            pL++;
          }
          else {
            x = pointR.get(0);
            rightY = pointR.get(1);
            pR++;
          }
          // max height (i.e. y) between both skylines
          maxY = Math.max(leftY, rightY);
          // update output if there is a skyline change
          if (currY != maxY) {
            updateOutput(output, x, maxY);
            currY = maxY;
          }
        }
    
        // there is only left skyline
        appendSkyline(output, left, pL, nL, currY);
    
        // there is only right skyline
        appendSkyline(output, right, pR, nR, currY);
    
        return output;
      }
    
      /**
       * Update the final output with the new element.
       */
      public void updateOutput(List<List<Integer>> output, int x, int y) {
        // if skyline change is not vertical -
        // add the new point
        if (output.isEmpty() || output.get(output.size() - 1).get(0) != x)
          output.add(new ArrayList<Integer>() {{add(x); add(y); }});
          // if skyline change is vertical -
          // update the last point
        else {
        System.out.println("set xCur: "+ output.get(output.size()-1).get(0));
          output.get(output.size() - 1).set(1, y);
        }
      }
    
      /**
       *  Append the rest of the skyline elements with indice (p, n)
       *  to the final output.
       */
      public void appendSkyline(List<List<Integer>> output, List<List<Integer>> skyline,
                                int p, int n, int currY) {
        while (p < n) {
          List<Integer> point = skyline.get(p);
          int x = point.get(0);
          int y = point.get(1);
          p++;
    
          // update output
          // if there is a skyline change
          if (currY != y) {
            updateOutput(output, x, y);
            currY = y;
          }
        }
      }

    public static void main(String[] Args){
        Solution s = new Solution();
        int[][] buildings = new int[][]{{9000,10001,19001},{9001,10001,1000},{9002,10001,999},{9003,10001,998},{9004,10001,997},{9005,10001,996},{9006,10001,995},{9007,10001,994},{9008,10001,993},{9009,10001,992},{9010,10001,991},{9011,10001,990},{9012,10001,989},{9013,10001,988},{9014,10001,987},{9015,10001,986},{9016,10001,985},{9017,10001,984},{9018,10001,983},{9019,10001,982},{9020,10001,981},{9021,10001,980},{9022,10001,979},{9023,10001,978},{9024,10001,977},{9025,10001,976},{9026,10001,975},{9027,10001,974},{9028,10001,973},{9029,10001,972},{9030,10001,971},{9031,10001,970},{9032,10001,969},{9033,10001,968},{9034,10001,967},{9035,10001,966},{9036,10001,965},{9037,10001,964},{9038,10001,963},{9039,10001,962},{9040,10001,961},{9041,10001,960},{9042,10001,959},{9043,10001,958},{9044,10001,957},{9045,10001,956},{9046,10001,955},{9047,10001,954},{9048,10001,953},{9049,10001,952},{9050,10001,951},{9051,10001,950},{9052,10001,949},{9053,10001,948},{9054,10001,947},{9055,10001,946},{9056,10001,945},{9057,10001,944},{9058,10001,943},{9059,10001,942},{9060,10001,941},{9061,10001,940},{9062,10001,939},{9063,10001,938},{9064,10001,937},{9065,10001,936},{9066,10001,935},{9067,10001,934},{9068,10001,933},{9069,10001,932},{9070,10001,931},{9071,10001,930},{9072,10001,929},{9073,10001,928},{9074,10001,927},{9075,10001,926},{9076,10001,925},{9077,10001,924},{9078,10001,923},{9079,10001,922},{9080,10001,921},{9081,10001,920},{9082,10001,919},{9083,10001,918},{9084,10001,917},{9085,10001,916},{9086,10001,915},{9087,10001,914},{9088,10001,913},{9089,10001,912},{9090,10001,911},{9091,10001,910},{9092,10001,909},{9093,10001,908},{9094,10001,907},{9095,10001,906},{9096,10001,905},{9097,10001,904},{9098,10001,903},{9099,10001,902},{9100,10001,901},{9101,10001,900},{9102,10001,899},{9103,10001,898},{9104,10001,897},{9105,10001,896},{9106,10001,895},{9107,10001,894},{9108,10001,893},{9109,10001,892},{9110,10001,891},{9111,10001,890},{9112,10001,889},{9113,10001,888},{9114,10001,887},{9115,10001,886},{9116,10001,885},{9117,10001,884},{9118,10001,883},{9119,10001,882},{9120,10001,881},{9121,10001,880},{9122,10001,879},{9123,10001,878},{9124,10001,877},{9125,10001,876},{9126,10001,875},{9127,10001,874},{9128,10001,873},{9129,10001,872},{9130,10001,871},{9131,10001,870},{9132,10001,869},{9133,10001,868},{9134,10001,867},{9135,10001,866},{9136,10001,865},{9137,10001,864},{9138,10001,863},{9139,10001,862},{9140,10001,861},{9141,10001,860},{9142,10001,859},{9143,10001,858},{9144,10001,857},{9145,10001,856},{9146,10001,855},{9147,10001,854},{9148,10001,853},{9149,10001,852},{9150,10001,851},{9151,10001,850},{9152,10001,849},{9153,10001,848},{9154,10001,847},{9155,10001,846},{9156,10001,845},{9157,10001,844},{9158,10001,843},{9159,10001,842},{9160,10001,841},{9161,10001,840},{9162,10001,839},{9163,10001,838},{9164,10001,837},{9165,10001,836},{9166,10001,835},{9167,10001,834},{9168,10001,833},{9169,10001,832},{9170,10001,831},{9171,10001,830},{9172,10001,829},{9173,10001,828},{9174,10001,827},{9175,10001,826},{9176,10001,825},{9177,10001,824},{9178,10001,823},{9179,10001,822},{9180,10001,821},{9181,10001,820},{9182,10001,819},{9183,10001,818},{9184,10001,817},{9185,10001,816},{9186,10001,815},{9187,10001,814},{9188,10001,813},{9189,10001,812},{9190,10001,811},{9191,10001,810},{9192,10001,809},{9193,10001,808},{9194,10001,807},{9195,10001,806},{9196,10001,805},{9197,10001,804},{9198,10001,803},{9199,10001,802},{9200,10001,801},{9201,10001,800},{9202,10001,799},{9203,10001,798},{9204,10001,797},{9205,10001,796},{9206,10001,795},{9207,10001,794},{9208,10001,793},{9209,10001,792},{9210,10001,791},{9211,10001,790},{9212,10001,789},{9213,10001,788},{9214,10001,787},{9215,10001,786},{9216,10001,785},{9217,10001,784},{9218,10001,783},{9219,10001,782},{9220,10001,781},{9221,10001,780},{9222,10001,779},{9223,10001,778},{9224,10001,777},{9225,10001,776},{9226,10001,775},{9227,10001,774},{9228,10001,773},{9229,10001,772},{9230,10001,771},{9231,10001,770},{9232,10001,769},{9233,10001,768},{9234,10001,767},{9235,10001,766},{9236,10001,765},{9237,10001,764},{9238,10001,763},{9239,10001,762},{9240,10001,761},{9241,10001,760},{9242,10001,759},{9243,10001,758},{9244,10001,757},{9245,10001,756},{9246,10001,755},{9247,10001,754},{9248,10001,753},{9249,10001,752},{9250,10001,751},{9251,10001,750},{9252,10001,749},{9253,10001,748},{9254,10001,747},{9255,10001,746},{9256,10001,745},{9257,10001,744},{9258,10001,743},{9259,10001,742},{9260,10001,741},{9261,10001,740},{9262,10001,739},{9263,10001,738},{9264,10001,737},{9265,10001,736},{9266,10001,735},{9267,10001,734},{9268,10001,733},{9269,10001,732},{9270,10001,731},{9271,10001,730},{9272,10001,729},{9273,10001,728},{9274,10001,727},{9275,10001,726},{9276,10001,725},{9277,10001,724},{9278,10001,723},{9279,10001,722},{9280,10001,721},{9281,10001,720},{9282,10001,719},{9283,10001,718},{9284,10001,717},{9285,10001,716},{9286,10001,715},{9287,10001,714},{9288,10001,713},{9289,10001,712},{9290,10001,711},{9291,10001,710},{9292,10001,709},{9293,10001,708},{9294,10001,707},{9295,10001,706},{9296,10001,705},{9297,10001,704},{9298,10001,703},{9299,10001,702},{9300,10001,701},{9301,10001,700},{9302,10001,699},{9303,10001,698},{9304,10001,697},{9305,10001,696},{9306,10001,695},{9307,10001,694},{9308,10001,693},{9309,10001,692},{9310,10001,691},{9311,10001,690},{9312,10001,689},{9313,10001,688},{9314,10001,687},{9315,10001,686},{9316,10001,685},{9317,10001,684},{9318,10001,683},{9319,10001,682},{9320,10001,681},{9321,10001,680},{9322,10001,679},{9323,10001,678},{9324,10001,677},{9325,10001,676},{9326,10001,675},{9327,10001,674},{9328,10001,673},{9329,10001,672},{9330,10001,671},{9331,10001,670},{9332,10001,669},{9333,10001,668},{9334,10001,667},{9335,10001,666},{9336,10001,665},{9337,10001,664},{9338,10001,663},{9339,10001,662},{9340,10001,661},{9341,10001,660},{9342,10001,659},{9343,10001,658},{9344,10001,657},{9345,10001,656},{9346,10001,655},{9347,10001,654},{9348,10001,653},{9349,10001,652},{9350,10001,651},{9351,10001,650},{9352,10001,649},{9353,10001,648},{9354,10001,647},{9355,10001,646},{9356,10001,645},{9357,10001,644},{9358,10001,643},{9359,10001,642},{9360,10001,641},{9361,10001,640},{9362,10001,639},{9363,10001,638},{9364,10001,637},{9365,10001,636},{9366,10001,635},{9367,10001,634},{9368,10001,633},{9369,10001,632},{9370,10001,631},{9371,10001,630},{9372,10001,629},{9373,10001,628},{9374,10001,627},{9375,10001,626},{9376,10001,625},{9377,10001,624},{9378,10001,623},{9379,10001,622},{9380,10001,621},{9381,10001,620},{9382,10001,619},{9383,10001,618},{9384,10001,617},{9385,10001,616},{9386,10001,615},{9387,10001,614},{9388,10001,613},{9389,10001,612},{9390,10001,611},{9391,10001,610},{9392,10001,609},{9393,10001,608},{9394,10001,607},{9395,10001,606},{9396,10001,605},{9397,10001,604},{9398,10001,603},{9399,10001,602},{9400,10001,601},{9401,10001,600},{9402,10001,599},{9403,10001,598},{9404,10001,597},{9405,10001,596},{9406,10001,595},{9407,10001,594},{9408,10001,593},{9409,10001,592},{9410,10001,591},{9411,10001,590},{9412,10001,589},{9413,10001,588},{9414,10001,587},{9415,10001,586},{9416,10001,585},{9417,10001,584},{9418,10001,583},{9419,10001,582},{9420,10001,581},{9421,10001,580},{9422,10001,579},{9423,10001,578},{9424,10001,577},{9425,10001,576},{9426,10001,575},{9427,10001,574},{9428,10001,573},{9429,10001,572},{9430,10001,571},{9431,10001,570},{9432,10001,569},{9433,10001,568},{9434,10001,567},{9435,10001,566},{9436,10001,565},{9437,10001,564},{9438,10001,563},{9439,10001,562},{9440,10001,561},{9441,10001,560},{9442,10001,559},{9443,10001,558},{9444,10001,557},{9445,10001,556},{9446,10001,555},{9447,10001,554},{9448,10001,553},{9449,10001,552},{9450,10001,551},{9451,10001,550},{9452,10001,549},{9453,10001,548},{9454,10001,547},{9455,10001,546},{9456,10001,545},{9457,10001,544},{9458,10001,543},{9459,10001,542},{9460,10001,541},{9461,10001,540},{9462,10001,539},{9463,10001,538},{9464,10001,537},{9465,10001,536},{9466,10001,535},{9467,10001,534},{9468,10001,533},{9469,10001,532},{9470,10001,531},{9471,10001,530},{9472,10001,529},{9473,10001,528},{9474,10001,527},{9475,10001,526},{9476,10001,525},{9477,10001,524},{9478,10001,523},{9479,10001,522},{9480,10001,521},{9481,10001,520},{9482,10001,519},{9483,10001,518},{9484,10001,517},{9485,10001,516},{9486,10001,515},{9487,10001,514},{9488,10001,513},{9489,10001,512},{9490,10001,511},{9491,10001,510},{9492,10001,509},{9493,10001,508},{9494,10001,507},{9495,10001,506},{9496,10001,505},{9497,10001,504},{9498,10001,503},{9499,10001,502},{9500,10001,501},{9501,10001,500},{9502,10001,499},{9503,10001,498},{9504,10001,497},{9505,10001,496},{9506,10001,495},{9507,10001,494},{9508,10001,493},{9509,10001,492},{9510,10001,491},{9511,10001,490},{9512,10001,489},{9513,10001,488},{9514,10001,487},{9515,10001,486},{9516,10001,485},{9517,10001,484},{9518,10001,483},{9519,10001,482},{9520,10001,481},{9521,10001,480},{9522,10001,479},{9523,10001,478},{9524,10001,477},{9525,10001,476},{9526,10001,475},{9527,10001,474},{9528,10001,473},{9529,10001,472},{9530,10001,471},{9531,10001,470},{9532,10001,469},{9533,10001,468},{9534,10001,467},{9535,10001,466},{9536,10001,465},{9537,10001,464},{9538,10001,463},{9539,10001,462},{9540,10001,461},{9541,10001,460},{9542,10001,459},{9543,10001,458},{9544,10001,457},{9545,10001,456},{9546,10001,455},{9547,10001,454},{9548,10001,453},{9549,10001,452},{9550,10001,451},{9551,10001,450},{9552,10001,449},{9553,10001,448},{9554,10001,447},{9555,10001,446},{9556,10001,445},{9557,10001,444},{9558,10001,443},{9559,10001,442},{9560,10001,441},{9561,10001,440},{9562,10001,439},{9563,10001,438},{9564,10001,437},{9565,10001,436},{9566,10001,435},{9567,10001,434},{9568,10001,433},{9569,10001,432},{9570,10001,431},{9571,10001,430},{9572,10001,429},{9573,10001,428},{9574,10001,427},{9575,10001,426},{9576,10001,425},{9577,10001,424},{9578,10001,423},{9579,10001,422},{9580,10001,421},{9581,10001,420},{9582,10001,419},{9583,10001,418},{9584,10001,417},{9585,10001,416},{9586,10001,415},{9587,10001,414},{9588,10001,413},{9589,10001,412},{9590,10001,411},{9591,10001,410},{9592,10001,409},{9593,10001,408},{9594,10001,407},{9595,10001,406},{9596,10001,405},{9597,10001,404},{9598,10001,403},{9599,10001,402},{9600,10001,401},{9601,10001,400},{9602,10001,399},{9603,10001,398},{9604,10001,397},{9605,10001,396},{9606,10001,395},{9607,10001,394},{9608,10001,393},{9609,10001,392},{9610,10001,391},{9611,10001,390},{9612,10001,389},{9613,10001,388},{9614,10001,387},{9615,10001,386},{9616,10001,385},{9617,10001,384},{9618,10001,383},{9619,10001,382},{9620,10001,381},{9621,10001,380},{9622,10001,379},{9623,10001,378},{9624,10001,377},{9625,10001,376},{9626,10001,375},{9627,10001,374},{9628,10001,373},{9629,10001,372},{9630,10001,371},{9631,10001,370},{9632,10001,369},{9633,10001,368},{9634,10001,367},{9635,10001,366},{9636,10001,365},{9637,10001,364},{9638,10001,363},{9639,10001,362},{9640,10001,361},{9641,10001,360},{9642,10001,359},{9643,10001,358},{9644,10001,357},{9645,10001,356},{9646,10001,355},{9647,10001,354},{9648,10001,353},{9649,10001,352},{9650,10001,351},{9651,10001,350},{9652,10001,349},{9653,10001,348},{9654,10001,347},{9655,10001,346},{9656,10001,345},{9657,10001,344},{9658,10001,343},{9659,10001,342},{9660,10001,341},{9661,10001,340},{9662,10001,339},{9663,10001,338},{9664,10001,337},{9665,10001,336},{9666,10001,335},{9667,10001,334},{9668,10001,333},{9669,10001,332},{9670,10001,331},{9671,10001,330},{9672,10001,329},{9673,10001,328},{9674,10001,327},{9675,10001,326},{9676,10001,325},{9677,10001,324},{9678,10001,323},{9679,10001,322},{9680,10001,321},{9681,10001,320},{9682,10001,319},{9683,10001,318},{9684,10001,317},{9685,10001,316},{9686,10001,315},{9687,10001,314},{9688,10001,313},{9689,10001,312},{9690,10001,311},{9691,10001,310},{9692,10001,309},{9693,10001,308},{9694,10001,307},{9695,10001,306},{9696,10001,305},{9697,10001,304},{9698,10001,303},{9699,10001,302},{9700,10001,301},{9701,10001,300},{9702,10001,299},{9703,10001,298},{9704,10001,297},{9705,10001,296},{9706,10001,295},{9707,10001,294},{9708,10001,293},{9709,10001,292},{9710,10001,291},{9711,10001,290},{9712,10001,289},{9713,10001,288},{9714,10001,287},{9715,10001,286},{9716,10001,285},{9717,10001,284},{9718,10001,283},{9719,10001,282},{9720,10001,281},{9721,10001,280},{9722,10001,279},{9723,10001,278},{9724,10001,277},{9725,10001,276},{9726,10001,275},{9727,10001,274},{9728,10001,273},{9729,10001,272},{9730,10001,271},{9731,10001,270},{9732,10001,269},{9733,10001,268},{9734,10001,267},{9735,10001,266},{9736,10001,265},{9737,10001,264},{9738,10001,263},{9739,10001,262},{9740,10001,261},{9741,10001,260},{9742,10001,259},{9743,10001,258},{9744,10001,257},{9745,10001,256},{9746,10001,255},{9747,10001,254},{9748,10001,253},{9749,10001,252},{9750,10001,251},{9751,10001,250},{9752,10001,249},{9753,10001,248},{9754,10001,247},{9755,10001,246},{9756,10001,245},{9757,10001,244},{9758,10001,243},{9759,10001,242},{9760,10001,241},{9761,10001,240},{9762,10001,239},{9763,10001,238},{9764,10001,237},{9765,10001,236},{9766,10001,235},{9767,10001,234},{9768,10001,233},{9769,10001,232},{9770,10001,231},{9771,10001,230},{9772,10001,229},{9773,10001,228},{9774,10001,227},{9775,10001,226},{9776,10001,225},{9777,10001,224},{9778,10001,223},{9779,10001,222},{9780,10001,221},{9781,10001,220},{9782,10001,219},{9783,10001,218},{9784,10001,217},{9785,10001,216},{9786,10001,215},{9787,10001,214},{9788,10001,213},{9789,10001,212},{9790,10001,211},{9791,10001,210},{9792,10001,209},{9793,10001,208},{9794,10001,207},{9795,10001,206},{9796,10001,205},{9797,10001,204},{9798,10001,203},{9799,10001,202},{9800,10001,201},{9801,10001,200},{9802,10001,199},{9803,10001,198},{9804,10001,197},{9805,10001,196},{9806,10001,195},{9807,10001,194},{9808,10001,193},{9809,10001,192},{9810,10001,191},{9811,10001,190},{9812,10001,189},{9813,10001,188},{9814,10001,187},{9815,10001,186},{9816,10001,185},{9817,10001,184},{9818,10001,183},{9819,10001,182},{9820,10001,181},{9821,10001,180},{9822,10001,179},{9823,10001,178},{9824,10001,177},{9825,10001,176},{9826,10001,175},{9827,10001,174},{9828,10001,173},{9829,10001,172},{9830,10001,171},{9831,10001,170},{9832,10001,169},{9833,10001,168},{9834,10001,167},{9835,10001,166},{9836,10001,165},{9837,10001,164},{9838,10001,163},{9839,10001,162},{9840,10001,161},{9841,10001,160},{9842,10001,159},{9843,10001,158},{9844,10001,157},{9845,10001,156},{9846,10001,155},{9847,10001,154},{9848,10001,153},{9849,10001,152},{9850,10001,151},{9851,10001,150},{9852,10001,149},{9853,10001,148},{9854,10001,147},{9855,10001,146},{9856,10001,145},{9857,10001,144},{9858,10001,143},{9859,10001,142},{9860,10001,141},{9861,10001,140},{9862,10001,139},{9863,10001,138},{9864,10001,137},{9865,10001,136},{9866,10001,135},{9867,10001,134},{9868,10001,133},{9869,10001,132},{9870,10001,131},{9871,10001,130},{9872,10001,129},{9873,10001,128},{9874,10001,127},{9875,10001,126},{9876,10001,125},{9877,10001,124},{9878,10001,123},{9879,10001,122},{9880,10001,121},{9881,10001,120},{9882,10001,119},{9883,10001,118},{9884,10001,117},{9885,10001,116},{9886,10001,115},{9887,10001,114},{9888,10001,113},{9889,10001,112},{9890,10001,111},{9891,10001,110},{9892,10001,109},{9893,10001,108},{9894,10001,107},{9895,10001,106},{9896,10001,105},{9897,10001,104},{9898,10001,103},{9899,10001,102},{9900,10001,101},{9901,10001,100},{9902,10001,99},{9903,10001,98},{9904,10001,97},{9905,10001,96},{9906,10001,95},{9907,10001,94},{9908,10001,93},{9909,10001,92},{9910,10001,91},{9911,10001,90},{9912,10001,89},{9913,10001,88},{9914,10001,87},{9915,10001,86},{9916,10001,85},{9917,10001,84},{9918,10001,83},{9919,10001,82},{9920,10001,81},{9921,10001,80},{9922,10001,79},{9923,10001,78},{9924,10001,77},{9925,10001,76},{9926,10001,75},{9927,10001,74},{9928,10001,73},{9929,10001,72},{9930,10001,71},{9931,10001,70},{9932,10001,69},{9933,10001,68},{9934,10001,67},{9935,10001,66},{9936,10001,65},{9937,10001,64},{9938,10001,63},{9939,10001,62},{9940,10001,61},{9941,10001,60},{9942,10001,59},{9943,10001,58},{9944,10001,57},{9945,10001,56},{9946,10001,55},{9947,10001,54},{9948,10001,53},{9949,10001,52},{9950,10001,51},{9951,10001,50},{9952,10001,49},{9953,10001,48},{9954,10001,47},{9955,10001,46},{9956,10001,45},{9957,10001,44},{9958,10001,43},{9959,10001,42},{9960,10001,41},{9961,10001,40},{9962,10001,39},{9963,10001,38},{9964,10001,37},{9965,10001,36},{9966,10001,35},{9967,10001,34},{9968,10001,33},{9969,10001,32},{9970,10001,31},{9971,10001,30},{9972,10001,29},{9973,10001,28},{9974,10001,27},{9975,10001,26},{9976,10001,25},{9977,10001,24},{9978,10001,23},{9979,10001,22},{9980,10001,21},{9981,10001,20},{9982,10001,19},{9983,10001,18},{9984,10001,17},{9985,10001,16},{9986,10001,15},{9987,10001,14},{9988,10001,13},{9989,10001,12},{9990,10001,11},{9991,10001,10},{9992,10001,9},{9993,10001,8},{9994,10001,7},{9995,10001,6},{9996,10001,5},{9997,10001,4},{9998,10001,3},{9999,10001,2},{10000,10001,1}};
        System.out.println(s.getSkyline_anwser(buildings));
    }
}